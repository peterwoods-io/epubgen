import Foundation
import EPubGen

extension Config {
    class func createSampleConfig() -> String {
        var sampleConfig = ""
        
        sampleConfig += "# The author's name. Used in content.opf for <dc:creator>.\n"
        sampleConfig += "author: Ted Tester\n"
        sampleConfig += "\n"
        sampleConfig += "# The language-code of the book's language. Used in content.opf\n"
        sampleConfig += "# for <dc:language>.\n"
        sampleConfig += "language: de-DE\n"
        sampleConfig += "\n"
        sampleConfig += "# The copyright-info for the book. Used in content.opf for <dc:rights>.\n"
        sampleConfig += "copyright: A copyright-hint\n"
        sampleConfig += "\n"
        sampleConfig += "# The book's title. Used in content.opf for <dc:title> and in toc.xhtml\n"
        sampleConfig += "# for <title>\n"
        sampleConfig += "title: The Title Of The Book\n"
        sampleConfig += "\n"
        sampleConfig += "# The book's unique identifier. Used in content.opf for <dc:identifier>\n"
        sampleConfig += "identifier: a.unique.identifier\n"
        sampleConfig += "\n"
        sampleConfig += "# The book's publication-date. Used in content.opf for <dc:date>.\n"
        sampleConfig += "date: 2017-06-01T12:00:00Z\n"
        sampleConfig += "\n"
        sampleConfig += "# The description-text for the book. Used in content.opf for <dc:description>\n"
        sampleConfig += "description: A description-text of the book.\n"
        sampleConfig += "\n"
        sampleConfig += "# The path (within the package) to the cover-image-file.\n"
        sampleConfig += "cover: cover.jpg\n"
        sampleConfig += "\n"
        sampleConfig += "# An optional CSS-file to add to all generated XHTML-files.\n"
        sampleConfig += "style: style.css\n"
        sampleConfig += "\n"
        sampleConfig += "# A list of mappings from content-files (.xhtml or .md) to titles in the\n"
        sampleConfig += "# EPUB's table of contents (toc.xhtml)\n"
        sampleConfig += "01-cover.md: Cover\n"
        sampleConfig += "02-title.md: Title\n"
        sampleConfig += "03-imprint.md: Imprint\n"
        sampleConfig += "04-chapter1.md: Chaper 1\n"
        sampleConfig += "05-chapter2.md: Chapter 2\n"
        sampleConfig += "\n"
        sampleConfig += "# An optional filename for the epub-file generated by \(executableName)\n"
        sampleConfig += "epub-filename: Ted Tester - The Title Of The Book.epub\n"
        
        return sampleConfig
    }
}

let semaphore = DispatchSemaphore(value: 0)

let executableName = URL(fileURLWithPath: CommandLine.arguments[0]).lastPathComponent

Output.printStdOut(message: "\(executableName) \(Constants.version)")

guard CommandLine.argc >= 2 else {
    Help.printShortHelp(executableName: executableName)
    exit(EXIT_SUCCESS)
}

if CommandLine.arguments[1] == "--help" {
    Help.printHelp(executableName: executableName)
    exit(EXIT_SUCCESS)
}

if CommandLine.arguments[1] == "--create-configfile" {
    let sampleConfig = Config.createSampleConfig()
    let destinationUrl = URL(fileURLWithPath: "epubgen.cfg")
    if FileManager.default.fileExists(atPath: destinationUrl.path) {
        Output.printStdErr(message: "File already exists")
        exit(EXIT_FAILURE)
    }
    
    do {
        try sampleConfig.write(to: destinationUrl, atomically: true, encoding: String.Encoding.utf8)
    } catch let error {
        var errorMessage = ""
        errorMessage += "Failed to create config-file at\n"
        errorMessage += "    \(destinationUrl.path)\n"
        errorMessage += "\(error)"
        Output.printStdErr(message: errorMessage)
        exit(EXIT_FAILURE)
    }
    
    Output.printStdOut(message: "Configfile epubgen.cfg created")
    exit(EXIT_SUCCESS)
}

//Output.debugOutputEnabled = true

let generator: epubgen
let configFileURL: URL
if CommandLine.arguments[1] == "--epub2" {
    if CommandLine.arguments.count == 2 {
        var errorMessage = ""
        errorMessage += "Config file not defined"
        exit(EXIT_FAILURE)
    }
    generator = epub2gen()
    configFileURL = URL(fileURLWithPath: CommandLine.arguments[2])
} else {
    generator = epub3gen()
    configFileURL = URL(fileURLWithPath: CommandLine.arguments[1])
}

generator.generateEpub(withConfig: configFileURL) { () in
    semaphore.signal()
}

semaphore.wait()
